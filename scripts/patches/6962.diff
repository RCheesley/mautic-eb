diff --git a/app/bundles/CoreBundle/Config/config.php b/app/bundles/CoreBundle/Config/config.php
index bca4b79707..0865141a4f 100644
--- a/app/bundles/CoreBundle/Config/config.php
+++ b/app/bundles/CoreBundle/Config/config.php
@@ -997,6 +997,7 @@
         'log_path'                        => '%kernel.root_dir%/logs',
         'image_path'                      => 'media/images',
         'tmp_path'                        => '%kernel.root_dir%/cache',
+        'import_path'                     => '%kernel.root_dir%/cache/imports',
         'theme'                           => 'Mauve',
         'theme_import_allowed_extensions' => ['json', 'twig', 'css', 'js', 'htm', 'html', 'txt', 'jpg', 'jpeg', 'png', 'gif'],
         'db_driver'                       => 'pdo_mysql',
diff --git a/app/bundles/CoreBundle/Form/Type/ConfigType.php b/app/bundles/CoreBundle/Form/Type/ConfigType.php
index 636738f895..c4d29e31ba 100644
--- a/app/bundles/CoreBundle/Form/Type/ConfigType.php
+++ b/app/bundles/CoreBundle/Form/Type/ConfigType.php
@@ -17,7 +17,14 @@
 use Mautic\CoreBundle\Helper\LanguageHelper;
 use Mautic\CoreBundle\IpLookup\AbstractLookup;
 use Mautic\CoreBundle\IpLookup\IpLookupFormInterface;
+use Mautic\PageBundle\Form\Type\PageListType;
 use Symfony\Component\Form\AbstractType;
+use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
+use Symfony\Component\Form\Extension\Core\Type\NumberType;
+use Symfony\Component\Form\Extension\Core\Type\PasswordType;
+use Symfony\Component\Form\Extension\Core\Type\TextareaType;
+use Symfony\Component\Form\Extension\Core\Type\TextType;
+use Symfony\Component\Form\Extension\Core\Type\TimezoneType;
 use Symfony\Component\Form\FormBuilderInterface;
 use Symfony\Component\Form\FormEvent;
 use Symfony\Component\Form\FormEvents;
@@ -103,7 +110,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add(
             'site_url',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.site.url',
                 'label_attr' => ['class' => 'control-label'],
@@ -123,7 +130,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'webroot',
-            'page_list',
+            PageListType::class,
             [
                 'label'      => 'mautic.core.config.form.webroot',
                 'label_attr' => ['class' => 'control-label'],
@@ -140,7 +147,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'cache_path',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.cache.path',
                 'label_attr' => ['class' => 'control-label'],
@@ -158,9 +165,29 @@ public function buildForm(FormBuilderInterface $builder, array $options)
             ]
         );
 
+        $builder->add(
+            'import_path',
+            TextType::class,
+            [
+                'label'      => 'mautic.core.config.form.import.path',
+                'label_attr' => ['class' => 'control-label'],
+                'attr'       => [
+                    'class'   => 'form-control',
+                    'tooltip' => 'mautic.core.config.form.import.path.tooltip',
+                ],
+                'constraints' => [
+                    new NotBlank(
+                        [
+                            'message' => 'mautic.core.value.required',
+                        ]
+                    ),
+                ],
+            ]
+        );
+
         $builder->add(
             'log_path',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.log.path',
                 'label_attr' => ['class' => 'control-label'],
@@ -180,7 +207,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'image_path',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.image.path',
                 'label_attr' => ['class' => 'control-label'],
@@ -213,7 +240,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'locale',
-            'choice',
+            ChoiceType::class,
             [
                 'choices'  => $langChoices,
                 'label'    => 'mautic.core.config.form.locale',
@@ -230,7 +257,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
         $builder->add(
             $builder->create(
                 'trusted_hosts',
-                'text',
+                TextType::class,
                 [
                     'label'      => 'mautic.core.config.form.trusted.hosts',
                     'label_attr' => ['class' => 'control-label'],
@@ -246,7 +273,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
         $builder->add(
             $builder->create(
                 'trusted_proxies',
-                'text',
+                TextType::class,
                 [
                     'label'      => 'mautic.core.config.form.trusted.proxies',
                     'label_attr' => ['class' => 'control-label'],
@@ -263,7 +290,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
         $builder->add(
             $builder->create(
                 'do_not_track_ips',
-                'textarea',
+                TextareaType::class,
                 [
                     'label'      => 'mautic.core.config.form.do_not_track_ips',
                     'label_attr' => ['class' => 'control-label'],
@@ -280,7 +307,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
         $builder->add(
             $builder->create(
                 'do_not_track_bots',
-                'textarea',
+                TextareaType::class,
                 [
                     'label'      => 'mautic.core.config.form.do_not_track_bots',
                     'label_attr' => ['class' => 'control-label'],
@@ -296,7 +323,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'default_pagelimit',
-            'choice',
+            ChoiceType::class,
             [
                 'choices' => [
                     5   => 'mautic.core.pagination.5',
@@ -323,7 +350,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'default_timezone',
-            'timezone',
+            TimezoneType::class,
             [
                 'label'      => 'mautic.core.config.form.default.timezone',
                 'label_attr' => ['class' => 'control-label'],
@@ -339,7 +366,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'cached_data_timeout',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.cached.data.timeout',
                 'label_attr' => ['class' => 'control-label'],
@@ -361,7 +388,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'date_format_full',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.date.format.full',
                 'label_attr' => ['class' => 'control-label'],
@@ -381,7 +408,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'date_format_short',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.date.format.short',
                 'label_attr' => ['class' => 'control-label'],
@@ -401,7 +428,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'date_format_dateonly',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.date.format.dateonly',
                 'label_attr' => ['class' => 'control-label'],
@@ -421,7 +448,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'date_format_timeonly',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.date.format.timeonly',
                 'label_attr' => ['class' => 'control-label'],
@@ -441,7 +468,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'default_daterange_filter',
-            'choice',
+            ChoiceType::class,
             [
                 'choices' => [
                     'midnight'  => 'mautic.core.daterange.0days',
@@ -470,7 +497,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'ip_lookup_service',
-            'choice',
+            ChoiceType::class,
             [
                 'choices'    => $this->ipLookupChoices,
                 'label'      => 'mautic.core.config.form.ip.lookup.service',
@@ -488,7 +515,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
 
         $builder->add(
             'ip_lookup_auth',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.ip.lookup.auth',
                 'label_attr' => ['class' => 'control-label'],
@@ -536,7 +563,7 @@ function (FormEvent $event) use ($formModifier) {
 
         $builder->add(
             'transifex_username',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.transifex.username',
                 'label_attr' => ['class' => 'control-label'],
@@ -551,7 +578,7 @@ function (FormEvent $event) use ($formModifier) {
 
         $builder->add(
             'transifex_password',
-            'password',
+            PasswordType::class,
             [
                 'label'      => 'mautic.core.config.form.transifex.password',
                 'label_attr' => ['class' => 'control-label'],
@@ -568,7 +595,7 @@ function (FormEvent $event) use ($formModifier) {
 
         $builder->add(
             'update_stability',
-            'choice',
+            ChoiceType::class,
             [
                 'choices' => [
                     'alpha'  => 'mautic.core.config.update_stability.alpha',
@@ -588,7 +615,7 @@ function (FormEvent $event) use ($formModifier) {
 
         $builder->add(
             'link_shortener_url',
-            'text',
+            TextType::class,
             [
                 'label'      => 'mautic.core.config.form.link.shortener',
                 'label_attr' => ['class' => 'control-label'],
@@ -602,7 +629,7 @@ function (FormEvent $event) use ($formModifier) {
 
         $builder->add(
             'max_entity_lock_time',
-            'number',
+            NumberType::class,
             [
                 'label'      => 'mautic.core.config.form.link.max_entity_lock_time',
                 'label_attr' => ['class' => 'control-label'],
@@ -616,7 +643,7 @@ function (FormEvent $event) use ($formModifier) {
 
         $builder->add(
             'cors_restrict_domains',
-            'yesno_button_group',
+            YesNoButtonGroupType::class,
             [
                 'label' => 'mautic.core.config.cors.restrict.domains',
                 'data'  => (array_key_exists('cors_restrict_domains', $options['data']) && !empty($options['data']['cors_restrict_domains'])),
@@ -631,7 +658,7 @@ function (FormEvent $event) use ($formModifier) {
         $builder->add(
             $builder->create(
                 'cors_valid_domains',
-                'textarea',
+                TextareaType::class,
                 [
                     'label'      => 'mautic.core.config.cors.valid.domains',
                     'label_attr' => ['class' => 'control-label'],
diff --git a/app/bundles/CoreBundle/Helper/PathsHelper.php b/app/bundles/CoreBundle/Helper/PathsHelper.php
index 95dc6e4ffe..eb04e4707a 100644
--- a/app/bundles/CoreBundle/Helper/PathsHelper.php
+++ b/app/bundles/CoreBundle/Helper/PathsHelper.php
@@ -63,6 +63,11 @@ class PathsHelper
      */
     protected $temporaryDir;
 
+    /**
+     * @var string
+     */
+    protected $importDir;
+
     /**
      * @var User
      */
@@ -85,6 +90,7 @@ public function __construct(UserHelper $userHelper, CoreParametersHelper $corePa
         $this->dashboardUserImportDir = $this->removeTrailingSlash($coreParametersHelper->getParameter('dashboard_import_user_dir'));
         $this->kernelCacheDir         = $this->removeTrailingSlash($coreParametersHelper->getParameter('kernel.cache_dir'));
         $this->kernelLogsDir          = $this->removeTrailingSlash($coreParametersHelper->getParameter('kernel.logs_dir'));
+        $this->importDir              = $this->removeTrailingSlash($coreParametersHelper->getParameter('import_path'));
     }
 
     /**
@@ -106,6 +112,18 @@ public function getSystemPath($name, $fullPath = false)
                 $path = $this->paths['themes'].'/'.$this->theme;
                 break;
 
+            case 'imports':
+                if (empty($this->importDir)) {
+                    $this->importDir = $this->getSystemPath('tmp');
+                    $this->importDir .= '/imports';
+                }
+
+                if (!is_dir($this->importDir) && !file_exists($this->importDir) && is_writable($this->importDir)) {
+                    mkdir($this->importDir, 0755, true);
+                }
+
+                return $this->importDir;
+
             case 'cache':
             case 'logs':
             case 'temporary':
diff --git a/app/bundles/CoreBundle/Translations/en_US/messages.ini b/app/bundles/CoreBundle/Translations/en_US/messages.ini
index 09c866b903..28b08028cd 100644
--- a/app/bundles/CoreBundle/Translations/en_US/messages.ini
+++ b/app/bundles/CoreBundle/Translations/en_US/messages.ini
@@ -95,6 +95,8 @@ mautic.core.config.form.do_not_track_bots="List of Bots to not track with (one p
 mautic.core.config.form.do_not_track_bots.tooltip="List of Bots, one per line, that should not be associated with contact tracking"
 mautic.core.config.form.image.path="Relative path to the images directory"
 mautic.core.config.form.image.path.tooltip="Set the relative path from the public web root to where images uploaded through the editors should be stored."
+mautic.core.config.form.import.path="Path to the import directory"
+mautic.core.config.form.import.path.tooltip="Set the absolute path to the import directory. %kernel.root_dir% can be used as a placeholder to the app directory in the public web root. It is advised to use a directory outside of the public web root to prevent the logs from being accessible by the public."
 mautic.core.config.form.ip.lookup.auth="IP lookup service authentication"
 mautic.core.config.form.ip.lookup.auth.tooltip="Set authentication credential(s) required by the selected service. For services that require a username and password, use the format username:password."
 mautic.core.config.form.ip.lookup.service="IP lookup service"
diff --git a/app/bundles/CoreBundle/Views/FormTheme/Config/_config_coreconfig_widget.html.php b/app/bundles/CoreBundle/Views/FormTheme/Config/_config_coreconfig_widget.html.php
index 646372df37..2bc114f11e 100644
--- a/app/bundles/CoreBundle/Views/FormTheme/Config/_config_coreconfig_widget.html.php
+++ b/app/bundles/CoreBundle/Views/FormTheme/Config/_config_coreconfig_widget.html.php
@@ -13,7 +13,7 @@
 $template  = '<div class="col-md-6">{content}</div>';
 ?>
 
-<?php if (count(array_intersect($fieldKeys, ['site_url', 'update_stability', 'cache_path', 'log_path', 'theme', 'image_path']))): ?>
+<?php if (count(array_intersect($fieldKeys, ['site_url', 'update_stability', 'cache_path', 'log_path', 'theme', 'image_path', 'import_path']))): ?>
 <div class="panel panel-primary">
     <div class="panel-heading">
         <h3 class="panel-title"><?php echo $view['translator']->trans('mautic.core.config.header.general'); ?></h3>
@@ -24,6 +24,7 @@
             <?php echo $view['form']->rowIfExists($fields, 'webroot', $template); ?>
             <?php echo $view['form']->rowIfExists($fields, 'update_stability', $template); ?>
             <?php echo $view['form']->rowIfExists($fields, 'cache_path', $template); ?>
+            <?php echo $view['form']->rowIfExists($fields, 'import_path', $template); ?>
             <?php echo $view['form']->rowIfExists($fields, 'log_path', $template); ?>
             <?php echo $view['form']->rowIfExists($fields, 'theme', $template); ?>
             <?php echo $view['form']->rowIfExists($fields, 'image_path', $template); ?>
@@ -126,7 +127,6 @@
             <?php echo $view['form']->rowIfExists($fields, 'link_shortener_url', $template); ?>
         </div>
         <?php endif; ?>
-        
         <?php if (isset($fields['max_entity_lock_time'])): ?>
         <hr class="text-muted" />
         <div class="row">
@@ -135,4 +135,4 @@
         <?php endif; ?>
     </div>
 </div>
-<?php endif; ?>
\ No newline at end of file
+<?php endif; ?>
diff --git a/app/bundles/LeadBundle/Config/config.php b/app/bundles/LeadBundle/Config/config.php
index cfb04e2ad3..beecd8a737 100644
--- a/app/bundles/LeadBundle/Config/config.php
+++ b/app/bundles/LeadBundle/Config/config.php
@@ -1224,7 +1224,9 @@
         ],
     ],
     'parameters' => [
-        'parallel_import_limit'               => 1,
-        'background_import_if_more_rows_than' => 0,
+        'parallel_import_limit'                => 1,
+        'background_import_if_more_rows_than'  => 0,
+        'import_max_runtime'                   => 2,
+        'import_max_runtime_status'            => 4,
     ],
 ];
diff --git a/app/bundles/LeadBundle/Entity/ImportRepository.php b/app/bundles/LeadBundle/Entity/ImportRepository.php
index 11b09aa3ec..6552205b6b 100644
--- a/app/bundles/LeadBundle/Entity/ImportRepository.php
+++ b/app/bundles/LeadBundle/Entity/ImportRepository.php
@@ -28,10 +28,36 @@ class ImportRepository extends CommonRepository
      */
     public function getGhostImports($ghostDelay = 2, $limit = null)
     {
+        $dt = new \DateTime();
+
+        list($hours, $partial) = explode('.', sprintf('%01.4f', $ghostDelay));
+
+        if ($hours) {
+            $dt->modify("-$hours hours");
+        }
+
+        if ($partial) {
+            $partialDelay            = 60.0 * ($ghostDelay - $hours);
+            list($minutes, $partial) = explode('.', sprintf('%01.4f', $partialDelay));
+
+            if ($minutes) {
+                $dt->modify("-$minutes minutes");
+            }
+
+            if ($partial) {
+                $partialDelay            = 60.0 * ($partialDelay - $minutes);
+                list($seconds, $partial) = explode('.', sprintf('%01.3f', $partialDelay));
+
+                if ($seconds) {
+                    $dt->modify("-$seconds seconds");
+                }
+            }
+        }
+
         $q = $this->getQueryForStatuses([Import::IN_PROGRESS]);
         $q->select($this->getTableAlias())
             ->andWhere($q->expr()->lt($this->getTableAlias().'.dateModified', ':delay'))
-            ->setParameter('delay', (new \DateTime())->modify('-'.$ghostDelay.' hours'));
+            ->setParameter('delay', $dt);
 
         if ($limit !== null) {
             $q->setFirstResult(0)
diff --git a/app/bundles/LeadBundle/Form/Type/ConfigType.php b/app/bundles/LeadBundle/Form/Type/ConfigType.php
index 442a9f5570..3e0b5dcf85 100644
--- a/app/bundles/LeadBundle/Form/Type/ConfigType.php
+++ b/app/bundles/LeadBundle/Form/Type/ConfigType.php
@@ -11,7 +11,10 @@
 
 namespace Mautic\LeadBundle\Form\Type;
 
+use Mautic\LeadBundle\Entity\Import;
 use Symfony\Component\Form\AbstractType;
+use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
+use Symfony\Component\Form\Extension\Core\Type\NumberType;
 use Symfony\Component\Form\FormBuilderInterface;
 
 /**
@@ -25,14 +28,49 @@ class ConfigType extends AbstractType
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('background_import_if_more_rows_than', 'number', [
-            'label'      => 'mautic.lead.background.import.if.more.rows.than',
-            'label_attr' => ['class' => 'control-label'],
-            'attr'       => [
-                'class'   => 'form-control',
-                'tooltip' => 'mautic.lead.background.import.if.more.rows.than.tooltip',
-            ],
-        ]);
+        $builder->add(
+            'background_import_if_more_rows_than',
+            NumberType::class,
+            [
+                'label'      => 'mautic.lead.background.import.if.more.rows.than',
+                'label_attr' => ['class' => 'control-label'],
+                'attr'       => [
+                    'class'   => 'form-control',
+                    'tooltip' => 'mautic.lead.background.import.if.more.rows.than.tooltip',
+                ],
+            ]
+        );
+
+        $builder->add(
+            'import_max_runtime',
+            NumberType::class,
+            [
+                'label'      => 'mautic.lead.import.max.runtime',
+                'label_attr' => ['class' => 'control-label'],
+                'attr'       => [
+                    'class'   => 'form-control',
+                    'tooltip' => 'mautic.lead.import.max.runtime.tooltip',
+                ],
+            ]
+        );
+
+        $statusChoices = [];
+        foreach ([Import::DELAYED, Import::FAILED, Import::STOPPED] as $validStatus) {
+            $statusChoices[$validStatus] = 'mautic.lead.import.status.'.$validStatus;
+        }
+        $builder->add(
+            'import_max_runtime_status',
+            ChoiceType::class,
+            [
+                'choices'  => $statusChoices,
+                'label'    => 'mautic.lead.import.max.runtime.status',
+                'required' => true,
+                'attr'     => [
+                    'class'   => 'form-control',
+                    'tooltip' => 'mautic.lead.import.max.runtime.status.tooltip',
+                ],
+            ]
+        );
     }
 
     /**
diff --git a/app/bundles/LeadBundle/Model/ImportModel.php b/app/bundles/LeadBundle/Model/ImportModel.php
index 075d7d17cb..68ef27bccb 100644
--- a/app/bundles/LeadBundle/Model/ImportModel.php
+++ b/app/bundles/LeadBundle/Model/ImportModel.php
@@ -150,22 +150,45 @@ public function generateLink(Import $import)
     }
 
     /**
-     * Check if there are some IN_PROGRESS imports which got stuck for a while.
-     * Set those as failed.
+     * Returns import max runtime status from the configuration
+     * when max runtime has been exceeded.
+     *
+     * @param int $default
+     *
+     * @return int
      */
-    public function setGhostImportsAsFailed()
+    public function getImportMaxRuntimeStatus($default = 4)
     {
-        $ghostDelay = 2;
-        $imports    = $this->getRepository()->getGhostImports($ghostDelay, 5);
+        return $this->config->getParameter('import_max_runtime_status', $default);
+    }
+
+    /**
+     * Check if there are some IN_PROGRESS imports which have exceded maximum runtime.
+     * Set those to ghost import status.
+     */
+    public function setMaxImportsRuntimeStatus()
+    {
+        $maxImportRuntime = $this->config->getParameter('import_max_runtime', 2);
+        $imports          = $this->getRepository()->getGhostImports($maxImportRuntime, 5);
 
         if (empty($imports)) {
             return null;
         }
 
+        $status   = $this->getImportMaxRuntimeStatus();
+        $infoVars = [
+            '%limit%' => $maxImportRuntime,
+            '%status' => $this->translator->trans('mautic.lead.import.status.'.$status),
+        ];
+
+        /** @var Import $import */
         foreach ($imports as $import) {
-            $import->setStatus($import::FAILED)
-                ->setStatusInfo($this->translator->trans('mautic.lead.import.ghost.limit.hit', ['%limit%' => $ghostDelay]))
-                ->removeFile();
+            $import->setStatus($status)
+                ->setStatusInfo($this->translator->trans('mautic.lead.import.max.runtime.hit', $infoVars));
+
+            if (Import::FAILED === $status) {
+                $import->removeFile();
+            }
 
             if ($import->getCreatedBy()) {
                 $this->notificationModel->addNotification(
@@ -175,7 +198,7 @@ public function setGhostImportsAsFailed()
                     ),
                     'info',
                     false,
-                    $this->translator->trans('mautic.lead.import.failed'),
+                    $this->translator->trans('mautic.lead.import.'.$status),
                     'fa-download',
                     null,
                     $this->em->getReference('MauticUserBundle:User', $import->getCreatedBy())
@@ -222,7 +245,7 @@ public function startImport(Import $import, Progress $progress, $limit = 0)
      */
     public function beginImport(Import $import, Progress $progress, $limit = 0)
     {
-        $this->setGhostImportsAsFailed();
+        $this->setMaxImportsRuntimeStatus();
 
         if (!$import) {
             $msg = 'import is empty, closing the import process';
@@ -289,7 +312,8 @@ public function beginImport(Import $import, Progress $progress, $limit = 0)
         // Save the end changes so the user could see it
         $this->saveEntity($import);
 
-        if ($import->getCreatedBy()) {
+        // Perhaps implement Import::shouldNotify instead of using Import::canProceed
+        if ($import->getCreatedBy() && !$import->canProceed()) {
             $this->notificationModel->addNotification(
                 $this->translator->trans(
                     'mautic.lead.import.result.info',
@@ -651,9 +675,7 @@ public function getUniqueFileName()
      */
     public function getImportDir()
     {
-        $tmpDir = $this->pathsHelper->getSystemPath('tmp', true);
-
-        return $tmpDir.'/imports';
+        return $this->pathsHelper->getSystemPath('imports', true);
     }
 
     /**
diff --git a/app/bundles/LeadBundle/Tests/Model/ImportModelTest.php b/app/bundles/LeadBundle/Tests/Model/ImportModelTest.php
index c381cc760e..8d370e6599 100644
--- a/app/bundles/LeadBundle/Tests/Model/ImportModelTest.php
+++ b/app/bundles/LeadBundle/Tests/Model/ImportModelTest.php
@@ -151,7 +151,7 @@ public function testCheckParallelImportLimitWhenLess()
     public function testStartImportWhenParallelLimitHit()
     {
         $model = $this->getMockBuilder(ImportModel::class)
-            ->setMethods(['checkParallelImportLimit', 'setGhostImportsAsFailed', 'saveEntity', 'getParallelImportLimit', 'logDebug'])
+            ->setMethods(['checkParallelImportLimit', 'setMaxImportsRuntimeStatus', 'saveEntity', 'getParallelImportLimit', 'logDebug'])
             ->disableOriginalConstructor()
             ->getMock();
 
@@ -184,7 +184,7 @@ public function testStartImportWhenParallelLimitHit()
     public function testBeginImportWhenParallelLimitHit()
     {
         $model = $this->getMockBuilder(ImportModel::class)
-            ->setMethods(['checkParallelImportLimit', 'setGhostImportsAsFailed', 'saveEntity', 'getParallelImportLimit'])
+            ->setMethods(['checkParallelImportLimit', 'setMaxImportsRuntimeStatus', 'saveEntity', 'getParallelImportLimit'])
             ->disableOriginalConstructor()
             ->getMock();
 
@@ -220,7 +220,7 @@ public function testBeginImportWhenParallelLimitHit()
     public function testStartImportWhenDatabaseException()
     {
         $model = $this->getMockBuilder(ImportModel::class)
-            ->setMethods(['checkParallelImportLimit', 'setGhostImportsAsFailed', 'saveEntity', 'logDebug', 'process'])
+            ->setMethods(['checkParallelImportLimit', 'setMaxImportsRuntimeStatus', 'saveEntity', 'logDebug', 'process'])
             ->disableOriginalConstructor()
             ->getMock();
 
@@ -254,7 +254,7 @@ public function testStartImportWhenDatabaseException()
     public function testBeginImportWhenDatabaseException()
     {
         $model = $this->getMockBuilder(ImportModel::class)
-            ->setMethods(['checkParallelImportLimit', 'setGhostImportsAsFailed', 'saveEntity', 'logDebug', 'process'])
+            ->setMethods(['checkParallelImportLimit', 'setMaxImportsRuntimeStatus', 'saveEntity', 'logDebug', 'process'])
             ->disableOriginalConstructor()
             ->getMock();
 
diff --git a/app/bundles/LeadBundle/Translations/en_US/messages.ini b/app/bundles/LeadBundle/Translations/en_US/messages.ini
index 417c4892fa..507f59fbf2 100755
--- a/app/bundles/LeadBundle/Translations/en_US/messages.ini
+++ b/app/bundles/LeadBundle/Translations/en_US/messages.ini
@@ -111,7 +111,6 @@ mautic.lead.field.help.defaultvalue="A default value will only apply to new cont
 mautic.lead.field.menu.index="Custom Fields"
 mautic.lead.field.label="Label"
 mautic.lead.field.linked="LinkedIn"
-mautic.lead.field.menu.index="Custom Fields"
 mautic.lead.field.tooltip.fixed="Cannot be removed (used internally)."
 mautic.lead.field.tooltip.invisible="Does not show in contact forms."
 mautic.lead.field.tooltip.listable="Can be used as a segment filter."
@@ -153,7 +152,6 @@ mautic.lead.import.inprogress="Import is in progress."
 mautic.lead.import.completed="Import completed"
 mautic.lead.import.failed="Import failed"
 mautic.lead.import.result.info="View details of %import%"
-mautic.lead.import.ghost.limit.hit="The import hasn't been updated in %limit% hours by the background job. It's considered failed."
 mautic.lead.import.default.owner="(Optional) Set the owner and the contact segment for the imported contacts."
 mautic.lead.import.donotleave="Please do not leave this page until complete or queued."
 mautic.lead.import.mapped.fields="Mapped fields"
@@ -165,7 +163,6 @@ mautic.lead.special_fields="Properties"
 mautic.lead.import.leads="Import %object%"
 mautic.lead.import.in.background="Import in background"
 mautic.lead.import.delayed="Import has been delayed: %reason%"
-mautic.lead.import.failed="Import failed: %reason%"
 mautic.lead.import.start="Import in browser"
 mautic.lead.import.start.instructions="Upload the CSV file that contains the items to be imported. The next step will be to match the fields in the file with the fields available in Mautic."
 mautic.lead.import.label.stage="Stage"
@@ -190,6 +187,11 @@ mautic.lead.import.result="%lines% lines were processed, %created% items created
 mautic.lead.import.failed="Import failed. Reason: %reason%"
 mautic.lead.background.import.if.more.rows.than="Automatically import in the background if the CSV has more rows than defined"
 mautic.lead.background.import.if.more.rows.than.tooltip="If this option is greater than 0, there will be only one Import button and the browser/background import will be decided based on the CSV row number"
+mautic.lead.import.max.runtime="Maximum import runtime (hours)"
+mautic.lead.import.max.runtime.tooltip="This can be a decimal value (i.e., 0.5 for 30 minutes). Set this value to zero to disable maximum runtime."
+mautic.lead.import.max.runtime.status="Runtime exceeded status."
+mautic.lead.import.max.runtime.status.tooltip="Status to use when an import has has been processing longer than the maximum runtime."
+mautic.lead.import.max.runtime.hit="The import hasn't been updated in %limit% hours by the background job. Status changed to %status%."
 mautic.config.tab.leadconfig="Contact Settings"
 mautic.config.tab.importconfig="Import Settings"
 mautic.lead.import.database.exception="There was a database error: %message%. The import was set to delayed state and will be imported later."
