diff --git a/app/bundles/CampaignBundle/Controller/CampaignController.php b/app/bundles/CampaignBundle/Controller/CampaignController.php
index 0e854506e8..65c8f95684 100644
--- a/app/bundles/CampaignBundle/Controller/CampaignController.php
+++ b/app/bundles/CampaignBundle/Controller/CampaignController.php
@@ -179,7 +179,7 @@ protected function afterEntityClone($campaign, $oldCampaign)
         $objectId = $oldCampaign->getId();
 
         // Get the events that need to be duplicated as well
-        $events = $oldCampaign->getEvents()->toArray();
+        $events = $oldCampaign->getPublishedEvents()->toArray();
 
         $campaign->setIsPublished(false);
 
@@ -362,7 +362,7 @@ protected function beforeEntitySave($entity, Form $form, $action, $objectId = nu
             if (!empty($this->deletedEvents)) {
                 /** @var EventModel $eventModel */
                 $eventModel = $this->getModel('campaign.event');
-                $eventModel->deleteEvents($entity->getEvents()->toArray(), $this->deletedEvents);
+                $eventModel->deleteEvents($entity->getPublishedEvents()->toArray(), $this->deletedEvents);
             }
         }
 
@@ -742,7 +742,11 @@ protected function prepareCampaignEventsForEdit($entity, $objectId, $isClone = f
         //load existing events into session
         $campaignEvents = [];
 
-        $existingEvents = $entity->getEvents()->toArray();
+        if ($isClone) {
+            $existingEvents = $entity->getEvents()->toArray();
+        } else {
+            $existingEvents = $entity->getPublishedEvents()->toArray();
+        }
         $translator     = $this->get('translator');
         $dateHelper     = $this->get('mautic.helper.template.date');
         foreach ($existingEvents as $e) {
diff --git a/app/bundles/CampaignBundle/Entity/Campaign.php b/app/bundles/CampaignBundle/Entity/Campaign.php
index 86be85ac87..28c7cd75f6 100644
--- a/app/bundles/CampaignBundle/Entity/Campaign.php
+++ b/app/bundles/CampaignBundle/Entity/Campaign.php
@@ -335,7 +335,30 @@ public function removeEvent(\Mautic\CampaignBundle\Entity\Event $event)
     }
 
     /**
-     * Get events.
+     * Get published events.
+     *
+     * @return \Doctrine\Common\Collections\ArrayCollection
+     */
+    public function getPublishedEvents()
+    {
+        $criteria = Criteria::create()->where(Criteria::expr()->eq('isPublished', true));
+        $events   =  $this->events->matching($criteria);
+
+        // Doctrine loses the indexBy mapping definition when using matching so we have to manually reset them.
+        // @see https://github.com/doctrine/doctrine2/issues/4693
+        $keyedArrayCollection = new ArrayCollection();
+        /** @var Event $event */
+        foreach ($events as $event) {
+            $keyedArrayCollection->set($event->getId(), $event);
+        }
+
+        unset($events);
+
+        return $keyedArrayCollection;
+    }
+
+    /**
+     * Get All events.
      *
      * @return \Doctrine\Common\Collections\ArrayCollection
      */
@@ -350,7 +373,7 @@ public function getEvents()
     public function getRootEvents()
     {
         $criteria = Criteria::create()->where(Criteria::expr()->isNull('parent'));
-        $events   = $this->getEvents()->matching($criteria);
+        $events   = $this->getPublishedEvents()->matching($criteria);
 
         // Doctrine loses the indexBy mapping definition when using matching so we have to manually reset them.
         // @see https://github.com/doctrine/doctrine2/issues/4693
@@ -371,7 +394,7 @@ public function getRootEvents()
     public function getInactionBasedEvents()
     {
         $criteria = Criteria::create()->where(Criteria::expr()->eq('decisionPath', Event::PATH_INACTION));
-        $events   = $this->getEvents()->matching($criteria);
+        $events   = $this->getPublishedEvents()->matching($criteria);
 
         // Doctrine loses the indexBy mapping definition when using matching so we have to manually reset them.
         // @see https://github.com/doctrine/doctrine2/issues/4693
@@ -392,7 +415,7 @@ public function getInactionBasedEvents()
     public function getEventsByType($type)
     {
         $criteria = Criteria::create()->where(Criteria::expr()->eq('eventType', $type));
-        $events   = $this->getEvents()->matching($criteria);
+        $events   = $this->getPublishedEvents()->matching($criteria);
 
         // Doctrine loses the indexBy mapping definition when using matching so we have to manually reset them.
         // @see https://github.com/doctrine/doctrine2/issues/4693
diff --git a/app/bundles/CampaignBundle/Entity/Event.php b/app/bundles/CampaignBundle/Entity/Event.php
index 389edc985c..c208a8104d 100644
--- a/app/bundles/CampaignBundle/Entity/Event.php
+++ b/app/bundles/CampaignBundle/Entity/Event.php
@@ -39,6 +39,11 @@ class Event implements ChannelInterface
      */
     private $id;
 
+    /**
+     * @var bool
+     */
+    private $isPublished = true;
+
     /**
      * @var string
      */
@@ -173,6 +178,11 @@ public static function loadMetadata(ORM\ClassMetadata $metadata)
 
         $builder->addIdColumns();
 
+        $builder->createField('isPublished', 'boolean')
+            ->columnName('is_published')
+            ->option('default', true)
+            ->build();
+
         $builder->createField('type', 'string')
             ->length(50)
             ->build();
@@ -416,6 +426,48 @@ public function getOrder()
         return $this->order;
     }
 
+    /**
+     * Set isPublished.
+     *
+     * @param bool $isPublished
+     *
+     * @return Event
+     */
+    public function setIsPublished($isPublished)
+    {
+        $this->isChanged('isPublished', $isPublished);
+
+        $this->isPublished = $isPublished;
+
+        return $this;
+    }
+
+    /**
+     * Get isPublished.
+     *
+     * @return bool
+     */
+    public function getIsPublished()
+    {
+        return $this->isPublished;
+    }
+
+    /**
+     * Check the publish status of an entity based on publish up and down datetimes.
+     *
+     * @return string early|expired|published|unpublished
+     *
+     * @throws \BadMethodCallException
+     */
+    public function getPublishStatus()
+    {
+        if ($this->getIsPublished()) {
+            return 'published';
+        }
+
+        return 'unpublished';
+    }
+
     /**
      * Set properties.
      *
@@ -654,7 +706,11 @@ public function getChildrenByType($type)
      */
     public function getChildrenByEventType($type)
     {
-        $criteria = Criteria::create()->where(Criteria::expr()->eq('eventType', $type));
+        $criteria = Criteria::create()->where(Criteria::expr()->andX(
+            Criteria::expr()->eq('eventType', $type),
+            Criteria::expr()->eq('is_published', true)
+            )
+        );
 
         return $this->getChildren()->matching($criteria);
     }
@@ -882,7 +938,9 @@ public function setContactLog($contactLog)
     /**
      * Used by the API.
      *
-     * @return Event
+     * @param $contactLog
+     *
+     * @return $this
      */
     public function addContactLog($contactLog)
     {
diff --git a/app/bundles/CampaignBundle/Entity/EventRepository.php b/app/bundles/CampaignBundle/Entity/EventRepository.php
index 3b3318c1f8..f6b6f3c52e 100644
--- a/app/bundles/CampaignBundle/Entity/EventRepository.php
+++ b/app/bundles/CampaignBundle/Entity/EventRepository.php
@@ -29,6 +29,9 @@ public function getEntities(array $args = [])
         $q      = $this
             ->createQueryBuilder('e')
             ->join('e.campaign', 'c');
+        $q->andWhere(
+            $q->expr()->eq('e.isPublished', true)
+        );
 
         if (!empty($args['campaign_id'])) {
             $q->andWhere(
@@ -133,6 +136,9 @@ public function getEventsByParent($parentId, $decisionPath = null, $eventType =
             )
               ->setParameter('eventType', $eventType);
         }
+        $q->andWhere(
+            $q->expr()->eq('e.isPublished', true)
+        );
 
         return $q->getQuery()->getArrayResult();
     }
@@ -152,6 +158,11 @@ public function getCampaignEvents($campaignId)
             )
             ->orderBy('e.order', 'ASC');
 
+        // dont get unpublished events
+        $q->andWhere(
+            $q->expr()->eq('e.isPublished', true)
+        );
+
         $results = $q->getQuery()->getArrayResult();
 
         // Fix the parent ID
@@ -234,6 +245,23 @@ public function nullEventRelationships($events)
             ->execute();
     }
 
+    /**
+     * remove  parent_id in preparation for soft-deleting events from a campaign.
+     *
+     * @param $events
+     */
+    public function removeParentFromSoftDeletedEvent($events)
+    {
+        $qb = $this->getEntityManager()->getConnection()->createQueryBuilder();
+        $qb->update(MAUTIC_TABLE_PREFIX.'campaign_events')
+            ->set('parent_id', ':null')
+            ->setParameter('null', null)
+            ->where(
+                $qb->expr()->in('id', $events)
+            )
+            ->execute();
+    }
+
     /**
      * @return string
      */
@@ -286,6 +314,9 @@ public function getEventsByChannel($channel, $campaignId = null, $eventType = 'a
         }
 
         $q->where($expr);
+        $q->andWhere(
+            $q->expr()->eq('e.isPublished', true)
+        );
 
         $results = $q->getQuery()->getResult();
 
diff --git a/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php b/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
index c9282494b1..324110f508 100644
--- a/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
+++ b/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
@@ -397,7 +397,8 @@ public function getScheduled($eventId, \DateTime $now, ContactLimiter $limiter)
                     $q->expr()->eq('IDENTITY(o.event)', ':eventId'),
                     $q->expr()->eq('o.isScheduled', ':true'),
                     $q->expr()->lte('o.triggerDate', ':now'),
-                    $q->expr()->eq('c.isPublished', 1)
+                    $q->expr()->eq('c.isPublished', 1),
+                    $q->expr()->eq('e.isPublished', 1)
                 )
             )
             ->setParameter('eventId', (int) $eventId)
@@ -453,7 +454,8 @@ public function getScheduledCounts($campaignId, \DateTime $date, ContactLimiter
             $q->expr()->eq('l.campaign_id', ':campaignId'),
             $q->expr()->eq('l.is_scheduled', ':true'),
             $q->expr()->lte('l.trigger_date', ':now'),
-            $q->expr()->eq('c.is_published', 1)
+            $q->expr()->eq('c.is_published', 1),
+            $q->expr()->eq('e.is_published', 1)
         );
 
         $this->updateQueryFromContactLimiter('l', $q, $limiter, true);
@@ -461,6 +463,7 @@ public function getScheduledCounts($campaignId, \DateTime $date, ContactLimiter
         $results = $q->select('COUNT(*) as event_count, l.event_id')
             ->from(MAUTIC_TABLE_PREFIX.'campaign_lead_event_log', 'l')
             ->join('l', MAUTIC_TABLE_PREFIX.'campaigns', 'c', 'l.campaign_id = c.id')
+            ->join('l', MAUTIC_TABLE_PREFIX.'campaign_events', 'e', 'l.event_id = e.id')
             ->where($expr)
             ->setParameter('campaignId', $campaignId)
             ->setParameter('now', $now->format('Y-m-d H:i:s'))
diff --git a/app/bundles/CampaignBundle/Model/CampaignModel.php b/app/bundles/CampaignBundle/Model/CampaignModel.php
index 39502437bd..694ef6ce23 100644
--- a/app/bundles/CampaignBundle/Model/CampaignModel.php
+++ b/app/bundles/CampaignBundle/Model/CampaignModel.php
@@ -263,7 +263,7 @@ protected function dispatchEvent($action, &$entity, $isNew = false, \Symfony\Com
     public function setEvents(Campaign $entity, $sessionEvents, $sessionConnections, $deletedEvents)
     {
         $eventSettings  = $this->getEvents();
-        $existingEvents = $entity->getEvents()->toArray();
+        $existingEvents = $entity->getPublishedEvents()->toArray();
         $events         =
         $hierarchy      =
         $parentUpdated  = [];
@@ -409,7 +409,7 @@ function ($a, $b) {
     public function setCanvasSettings($entity, $settings, $persist = true, $events = null)
     {
         if ($events === null) {
-            $events = $entity->getEvents();
+            $events = $entity->getPublishedEvents();
         }
 
         $tempIds = [];
diff --git a/app/bundles/CampaignBundle/Model/EventModel.php b/app/bundles/CampaignBundle/Model/EventModel.php
index 05e743009b..c9e004f668 100644
--- a/app/bundles/CampaignBundle/Model/EventModel.php
+++ b/app/bundles/CampaignBundle/Model/EventModel.php
@@ -95,10 +95,6 @@ public function deleteEvents($currentEvents, $deletedEvents)
                 unset($deletedEvents[$k]);
             }
 
-            if (isset($currentEvents[$deleteMe])) {
-                unset($deletedEvents[$k]);
-            }
-
             if (isset($deletedEvents[$k])) {
                 $deletedKeys[] = $deleteMe;
             }
@@ -107,9 +103,16 @@ public function deleteEvents($currentEvents, $deletedEvents)
         if (count($deletedEvents)) {
             // wipe out any references to these events to prevent restraint violations
             $this->getRepository()->nullEventRelationships($deletedKeys);
-
-            // delete the events
-            $this->deleteEntities($deletedEvents);
+            $this->getRepository()->removeParentFromSoftDeletedEvent($deletedKeys);
+
+            // soft delete the events in a loop using togglePublishStatus
+            foreach ($deletedKeys as $deletedKey) {
+                $entityToDelete = $this->getEntity($deletedKey);
+                $event          = $this->dispatchEvent('pre_delete', $entityToDelete);
+                $this->togglePublishStatus($entityToDelete);
+                $entityToDelete->deletedId = $deletedKey;
+                $this->dispatchEvent('post_delete', $entityToDelete, false, $event);
+            }
         }
     }
 
diff --git a/app/bundles/CampaignBundle/Tests/Command/AbstractCampaignCommand.php b/app/bundles/CampaignBundle/Tests/Command/AbstractCampaignCommand.php
index c712bda75b..e50b5cc535 100644
--- a/app/bundles/CampaignBundle/Tests/Command/AbstractCampaignCommand.php
+++ b/app/bundles/CampaignBundle/Tests/Command/AbstractCampaignCommand.php
@@ -83,17 +83,18 @@ public function tearDown()
 
     /**
      * @param array $ids
+     * @param int   $campaignId
      *
      * @return array
      */
-    protected function getCampaignEventLogs(array $ids)
+    protected function getCampaignEventLogs(array $ids, $campaignId = 1)
     {
         $logs = $this->db->createQueryBuilder()
             ->select('l.email, l.country, event.name, event.event_type, event.type, log.*')
             ->from($this->prefix.'campaign_lead_event_log', 'log')
             ->join('log', $this->prefix.'campaign_events', 'event', 'event.id = log.event_id')
             ->join('log', $this->prefix.'leads', 'l', 'l.id = log.lead_id')
-            ->where('log.campaign_id = 1')
+            ->where('log.campaign_id = '.$campaignId)
             ->andWhere('log.event_id IN ('.implode(',', $ids).')')
             ->execute()
             ->fetchAll();
diff --git a/app/bundles/CampaignBundle/Tests/Command/ExecuteEventCommandTest.php b/app/bundles/CampaignBundle/Tests/Command/ExecuteEventCommandTest.php
index 1775a8a49d..e9ec4a3704 100644
--- a/app/bundles/CampaignBundle/Tests/Command/ExecuteEventCommandTest.php
+++ b/app/bundles/CampaignBundle/Tests/Command/ExecuteEventCommandTest.php
@@ -34,7 +34,7 @@ public function testEventsAreExecutedForInactiveEventWithSingleContact()
 
         $this->runCommand('mautic:campaigns:execute', ['--scheduled-log-ids' => implode(',', $logIds)]);
 
-        // There should still be trhee events scheduled
+        // There should still be three events scheduled
         $byEvent = $this->getCampaignEventLogs([2]);
         $this->assertCount(3, $byEvent[2]);
 
@@ -46,7 +46,6 @@ public function testEventsAreExecutedForInactiveEventWithSingleContact()
 
         // Pop off the last so we can test that only the two given are executed
         $lastId = array_pop($logIds);
-
         // Wait 20 seconds to go past scheduled time
         sleep(20);
 
@@ -73,4 +72,28 @@ public function testEventsAreExecutedForInactiveEventWithSingleContact()
 
         putenv('CAMPAIGN_EXECUTIONER_SCHEDULER_ACKNOWLEDGE_SECONDS=0');
     }
+
+    /**
+     * @throws \Exception
+     */
+    public function testSoftDelete()
+    {
+        $campaignModel = $this->container->get('mautic.campaign.model.campaign');
+        $eventModel    = $this->container->get('mautic.campaign.model.event');
+
+        //getEvent Count for Campaign 2
+        $campaign = $campaignModel->getEntity(2);
+
+        $eventList = $campaign->getPublishedEvents();
+        $this->assertEquals(2, count($eventList->getValues()));
+
+        $eventModel->deleteEvents([], [17]);
+        $eventList = $campaign->getPublishedEvents();
+        $this->assertEquals(1, count($eventList->getValues()));
+
+        $this->runCommand('mautic:campaigns:trigger', ['-i' => 2, '--contact-ids' => '1,2,3,4']);
+        $byEvent = $this->getCampaignEventLogs([16, 17], 2);
+        $this->assertCount(4, $byEvent[16]);
+        $this->assertCount(0, $byEvent[17]);
+    }
 }
diff --git a/app/bundles/CampaignBundle/Views/SubscribedEvents/Timeline/index.html.php b/app/bundles/CampaignBundle/Views/SubscribedEvents/Timeline/index.html.php
index 63297031a4..fb7026fadd 100644
--- a/app/bundles/CampaignBundle/Views/SubscribedEvents/Timeline/index.html.php
+++ b/app/bundles/CampaignBundle/Views/SubscribedEvents/Timeline/index.html.php
@@ -46,7 +46,7 @@
                 <?php echo $view['translator']->trans('mautic.campaign.event.cancelled.time', ['%date%' => $dateSpan, '%event%' => $event['eventLabel']]); ?>
             </span>
         </span>
-        <?php if ($lead && $view['security']->hasEntityAccess('lead:leads:editown', 'lead:leads:editother', $lead->getPermissionUser())): ?>
+        <?php if ($lead && !$item['unpublished'] && $view['security']->hasEntityAccess('lead:leads:editown', 'lead:leads:editother', $lead->getPermissionUser())): ?>
         <span class="form-buttons btn-group btn-group-xs mb-3" role="group" aria-label="Field options">
             <button type="button" class="btn btn-default btn-edit btn-nospin" onclick="Mautic.updateScheduledCampaignEvent(<?php echo $item['event_id']; ?>, <?php echo $lead->getId(); ?>)" data-toggle="tooltip" title="<?php echo $view['translator']->trans('mautic.campaign.event.reschedule'); ?>">
                 <i class="fa fa-clock-o text-primary"></i>
diff --git a/app/bundles/LeadBundle/Views/Timeline/list.html.php b/app/bundles/LeadBundle/Views/Timeline/list.html.php
index c8cfb9e6f4..fee1810bab 100644
--- a/app/bundles/LeadBundle/Views/Timeline/list.html.php
+++ b/app/bundles/LeadBundle/Views/Timeline/list.html.php
@@ -65,10 +65,15 @@
         <?php foreach ($events['events'] as $counter => $event): ?>
             <?php
             $counter += 1; // prevent 0
-            $icon       = (isset($event['icon'])) ? $event['icon'] : 'fa-history';
-            $eventLabel = (isset($event['eventLabel'])) ? $event['eventLabel'] : $event['eventType'];
+            $icon        = (isset($event['icon'])) ? $event['icon'] : 'fa-history';
+            $eventLabel  = (isset($event['eventLabel'])) ? $event['eventLabel'] : $event['eventType'];
+            $isPublished = isset($event['extra']['log']['event_id']) ? $view->container->get('mautic.campaign.model.event')->getEntity($event['extra']['log']['event_id'])->getIsPublished() : 1;
             if (is_array($eventLabel)):
                 $linkType   = empty($eventLabel['isExternal']) ? 'data-toggle="ajax"' : 'target="_new"';
+                if (!$isPublished) {
+                    $eventLabel['label'] .= ' (Event has been UnPublished)';
+                    $event['extra']['log']['unpublished'] = true;
+                }
                 $eventLabel = "<a href=\"{$eventLabel['href']}\" $linkType>{$eventLabel['label']}</a>";
             endif;
 
diff --git a/app/migrations/Version20180628082960.php b/app/migrations/Version20180628082960.php
new file mode 100644
index 0000000000..87c751dda6
--- /dev/null
+++ b/app/migrations/Version20180628082960.php
@@ -0,0 +1,50 @@
+<?php
+
+/*
+ * @copyright   2015 Mautic Contributors. All rights reserved
+ * @author      Mautic
+ *
+ * @link        http://mautic.org
+ *
+ * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
+ */
+
+namespace Mautic\Migrations;
+
+use Doctrine\DBAL\Migrations\SkipMigrationException;
+use Doctrine\DBAL\Schema\Schema;
+use Mautic\CoreBundle\Doctrine\AbstractMauticMigration;
+
+/**
+ * 1.1.3 - 1.1.4.
+ *
+ * Class Version20180628082960
+ */
+class Version20180628082960 extends AbstractMauticMigration
+{
+    /**
+     * @param Schema $schema
+     *
+     * @throws SkipMigrationException
+     * @throws \Doctrine\DBAL\Schema\SchemaException
+     */
+    public function preUp(Schema $schema)
+    {
+        // Test to see if this migration has already been applied
+        $eventTable = $schema->getTable($this->prefix.'campaign_events');
+        if ($eventTable->hasColumn('is_published')) {
+            throw new SkipMigrationException('Schema includes this migration');
+        }
+    }
+
+    /**
+     * @param Schema $schema
+     */
+    public function up(Schema $schema)
+    {
+        $table = $schema->getTable($this->prefix.'campaign_events');
+        if (!$table->hasColumn('is_published')) {
+            $this->addSql('ALTER TABLE '.$this->prefix.'campaign_events ADD COLUMN is_published bool DEFAULT 1');
+        }
+    }
+}
