diff --git a/app/bundles/CampaignBundle/Command/TriggerCampaignCommand.php b/app/bundles/CampaignBundle/Command/TriggerCampaignCommand.php
index 4a1e33d48f..aa417057ab 100644
--- a/app/bundles/CampaignBundle/Command/TriggerCampaignCommand.php
+++ b/app/bundles/CampaignBundle/Command/TriggerCampaignCommand.php
@@ -156,6 +156,13 @@ protected function configure()
                 'Trigger events for a specific campaign.  Otherwise, all campaigns will be triggered.',
                 null
             )
+            ->addOption(
+                '--campaign-limit',
+                null,
+                InputOption::VALUE_OPTIONAL,
+                'Limit number of contacts on a per campaign basis',
+                null
+            )
             ->addOption(
                 '--contact-id',
                 null,
@@ -247,13 +254,14 @@ protected function execute(InputInterface $input, OutputInterface $output)
         $this->scheduleOnly = $input->getOption('scheduled-only');
         $this->inactiveOnly = $input->getOption('inactive-only') || $input->getOption('negative-only');
 
-        $batchLimit   = $input->getOption('batch-limit');
-        $contactMinId = $input->getOption('min-contact-id');
-        $contactMaxId = $input->getOption('max-contact-id');
-        $contactId    = $input->getOption('contact-id');
-        $contactIds   = $this->formatterHelper->simpleCsvToArray($input->getOption('contact-ids'), 'int');
-        $threadId     = $input->getOption('thread-id');
-        $maxThreads   = $input->getOption('max-threads');
+        $batchLimit    = $input->getOption('batch-limit');
+        $campaignLimit = $input->getOption('campaign-limit');
+        $contactMinId  = $input->getOption('min-contact-id');
+        $contactMaxId  = $input->getOption('max-contact-id');
+        $contactId     = $input->getOption('contact-id');
+        $contactIds    = $this->formatterHelper->simpleCsvToArray($input->getOption('contact-ids'), 'int');
+        $threadId      = $input->getOption('thread-id');
+        $maxThreads    = $input->getOption('max-threads');
 
         if ($threadId && $maxThreads && (int) $threadId > (int) $maxThreads) {
             $this->output->writeln('--thread-id cannot be larger than --max-thread');
@@ -261,7 +269,7 @@ protected function execute(InputInterface $input, OutputInterface $output)
             return 1;
         }
 
-        $this->limiter = new ContactLimiter($batchLimit, $contactId, $contactMinId, $contactMaxId, $contactIds, $threadId, $maxThreads);
+        $this->limiter = new ContactLimiter($batchLimit, $contactId, $contactMinId, $contactMaxId, $contactIds, $threadId, $maxThreads, $campaignLimit);
 
         defined('MAUTIC_CAMPAIGN_SYSTEM_TRIGGERED') or define('MAUTIC_CAMPAIGN_SYSTEM_TRIGGERED', 1);
 
@@ -292,6 +300,9 @@ protected function execute(InputInterface $input, OutputInterface $output)
             // Key is ID and not 0
             $campaign = reset($next);
             $this->triggerCampaign($campaign);
+            if ($this->limiter->hasCampaignLimit()) {
+                $this->limiter->resetCampaignLimitRemaining();
+            }
         }
 
         $this->completeRun();
diff --git a/app/bundles/CampaignBundle/Entity/CampaignRepository.php b/app/bundles/CampaignBundle/Entity/CampaignRepository.php
index e8c2fe0373..7377b92d32 100644
--- a/app/bundles/CampaignBundle/Entity/CampaignRepository.php
+++ b/app/bundles/CampaignBundle/Entity/CampaignRepository.php
@@ -394,6 +394,10 @@ public function getCountsForPendingContacts($campaignId, array $pendingEvents, C
      */
     public function getPendingContactIds($campaignId, ContactLimiter $limiter)
     {
+        if ($limiter->hasCampaignLimit() && 0 === $limiter->getCampaignLimitRemaining()) {
+            return [];
+        }
+
         $q = $this->getEntityManager()->getConnection()->createQueryBuilder();
 
         $q->select('cl.lead_id')
@@ -426,15 +430,21 @@ public function getPendingContactIds($campaignId, ContactLimiter $limiter)
         )
             ->setParameter('campaignId', (int) $campaignId);
 
-        $results = $q->execute()->fetchAll();
+        if ($limiter->hasCampaignLimit()) {
+            $q->setMaxResults($limiter->getCampaignLimitRemaining());
+        }
 
-        $leads = [];
+        $results = $q->execute()->fetchAll();
+        $leads   = [];
         foreach ($results as $r) {
             $leads[] = $r['lead_id'];
         }
-
         unset($results);
 
+        if ($limiter->hasCampaignLimit()) {
+            $limiter->reduceCampaignLimitRemaining(count($leads));
+        }
+
         return $leads;
     }
 
diff --git a/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php b/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
index c9282494b1..fbcfb5edcd 100644
--- a/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
+++ b/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php
@@ -386,6 +386,10 @@ public function getChartQuery($options)
      */
     public function getScheduled($eventId, \DateTime $now, ContactLimiter $limiter)
     {
+        if ($limiter->hasCampaignLimit() && 0 === $limiter->getCampaignLimitRemaining()) {
+            return new ArrayCollection();
+        }
+
         $q = $this->createQueryBuilder('o');
 
         $q->select('o, e, c')
@@ -406,7 +410,17 @@ public function getScheduled($eventId, \DateTime $now, ContactLimiter $limiter)
 
         $this->updateOrmQueryFromContactLimiter('o', $q, $limiter);
 
-        return new ArrayCollection($q->getQuery()->getResult());
+        if ($limiter->hasCampaignLimit()) {
+            $q->setMaxResults($limiter->getCampaignLimitRemaining());
+        }
+
+        $result = new ArrayCollection($q->getQuery()->getResult());
+
+        if ($limiter->hasCampaignLimit()) {
+            $limiter->reduceCampaignLimitRemaining($result->count());
+        }
+
+        return $result;
     }
 
     /**
diff --git a/app/bundles/CampaignBundle/Entity/LeadRepository.php b/app/bundles/CampaignBundle/Entity/LeadRepository.php
index a0e7409de4..190229fe26 100644
--- a/app/bundles/CampaignBundle/Entity/LeadRepository.php
+++ b/app/bundles/CampaignBundle/Entity/LeadRepository.php
@@ -252,12 +252,20 @@ public function getInactiveContacts($campaignId, $decisionId, $parentDecisionId,
             );
         }
 
+        if ($limiter->hasCampaignLimit()) {
+            $q->setMaxResults($limiter->getCampaignLimitRemaining());
+        }
+
         $results  = $q->execute()->fetchAll();
         $contacts = [];
         foreach ($results as $result) {
             $contacts[$result['lead_id']] = new \DateTime($result['date_added'], new \DateTimeZone('UTC'));
         }
 
+        if ($limiter->hasCampaignLimit()) {
+            $limiter->reduceCampaignLimitRemaining(count($contacts));
+        }
+
         return $contacts;
     }
 
diff --git a/app/bundles/CampaignBundle/Executioner/ContactFinder/InactiveContactFinder.php b/app/bundles/CampaignBundle/Executioner/ContactFinder/InactiveContactFinder.php
index 4ae5e46c2c..2c8751e08e 100644
--- a/app/bundles/CampaignBundle/Executioner/ContactFinder/InactiveContactFinder.php
+++ b/app/bundles/CampaignBundle/Executioner/ContactFinder/InactiveContactFinder.php
@@ -78,6 +78,11 @@ public function __construct(
      */
     public function getContacts($campaignId, Event $decisionEvent, ContactLimiter $limiter)
     {
+        if ($limiter->hasCampaignLimit() && 0 === $limiter->getCampaignLimitRemaining()) {
+            // Limit was reached but do not trigger the NoContactsFoundException
+            return new ArrayCollection();
+        }
+
         // Get list of all campaign leads
         $decisionParentEvent            = $decisionEvent->getParent();
         $this->campaignMemberDatesAdded = $this->campaignLeadRepository->getInactiveContacts(
diff --git a/app/bundles/CampaignBundle/Executioner/ContactFinder/Limiter/ContactLimiter.php b/app/bundles/CampaignBundle/Executioner/ContactFinder/Limiter/ContactLimiter.php
index 1be7d5f13e..8f74acb608 100644
--- a/app/bundles/CampaignBundle/Executioner/ContactFinder/Limiter/ContactLimiter.php
+++ b/app/bundles/CampaignBundle/Executioner/ContactFinder/Limiter/ContactLimiter.php
@@ -58,6 +58,16 @@ class ContactLimiter
      */
     private $maxThreads;
 
+    /**
+     * @var int|null
+     */
+    private $campaignLimit;
+
+    /**
+     * @var int|null
+     */
+    private $campaignLimitUsed;
+
     /**
      * ContactLimiter constructor.
      *
@@ -68,6 +78,7 @@ class ContactLimiter
      * @param array    $contactIdList
      * @param int|null $threadId
      * @param int|null $maxThreads
+     * @param int|null $campaignLimit
      */
     public function __construct(
         $batchLimit,
@@ -76,7 +87,8 @@ public function __construct(
         $maxContactId = null,
         array $contactIdList = [],
         $threadId = null,
-        $maxThreads = null
+        $maxThreads = null,
+        $campaignLimit = null
     ) {
         $this->batchLimit    = ($batchLimit) ? (int) $batchLimit : 100;
         $this->contactId     = ($contactId) ? (int) $contactId : null;
@@ -92,6 +104,11 @@ public function __construct(
                 throw new \InvalidArgumentException('$threadId cannot be larger than $maxThreads');
             }
         }
+
+        if ($campaignLimit) {
+            $this->campaignLimit     = $campaignLimit;
+            $this->campaignLimitUsed = 0;
+        }
     }
 
     /**
@@ -188,4 +205,63 @@ public function getThreadId()
     {
         return $this->threadId;
     }
+
+    /**
+     * @return int|null
+     */
+    public function getCampaignLimit()
+    {
+        return $this->campaignLimit;
+    }
+
+    /**
+     * @return bool
+     */
+    public function hasCampaignLimit()
+    {
+        return $this->campaignLimit !== null;
+    }
+
+    /**
+     * @return int
+     *
+     * @throws \Exception
+     */
+    public function getCampaignLimitRemaining()
+    {
+        if (!$this->hasCampaignLimit()) {
+            throw new \Exception('Campaign Limit was not set');
+        }
+
+        return $this->campaignLimit - $this->campaignLimitUsed;
+    }
+
+    /**
+     * @param $reduction
+     *
+     * @return $this
+     *
+     * @throws \Exception
+     */
+    public function reduceCampaignLimitRemaining($reduction)
+    {
+        if (!$this->hasCampaignLimit()) {
+            throw new \Exception('Campaign Limit was not set');
+        } elseif ($this->campaignLimit < ($this->campaignLimitUsed + $reduction)) {
+            throw new \Exception('Campaign Limit exceeded');
+        }
+        $this->campaignLimitUsed += $reduction;
+
+        return $this;
+    }
+
+    /**
+     * @return $this
+     */
+    public function resetCampaignLimitRemaining()
+    {
+        $this->campaignLimitUsed = 0;
+
+        return $this;
+    }
 }
